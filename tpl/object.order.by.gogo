{{define "object.order.by"}}
{{$order := .}}
{{$obj := .Obj}}
{{$primaryField := .Obj.PrimaryField}}

type {{$order.Name}} struct{
	{{- range $j, $field := $order.Fields}}
		{{- if eq (add $j 1) (len $order.Fields)}}
		{{$field.Name}}Begin {{$field.GetType}}
		{{$field.Name}}End {{$field.GetType}}
		{{- else}}
		{{$field.Name}} {{$field.GetType}}
		{{- end}}
	{{- end}}
	offset int
	limit int
	includeBegin bool
	includeEnd bool
	ascend bool
}

func (u *{{$order.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $order.Fields}}
			{{- if eq (add $j 1) (len $order.Fields)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint(u.{{$field.Name}}),
			{{- end}}
		{{- end}}
	}
	return fmt.Sprintf("%s", strings.Join(strs, ":"))
}

func (u *{{$order.Name}}) sortOp() string {
	if u.ascend {
		return "ASC"
	}
	return "DESC"
}

func (u *{{$order.Name}}) beginOp() string {
	if u.includeBegin {
		return ">="
	}
	return ">"
}

func (u *{{$order.Name}}) endOp() string {
	if u.includeBegin {
		return "<="
	}
	return "<"
}

func (u *{{$order.Name}}) SQLFormat() string {
	conditions := []string{}

	{{- range $j, $field := $order.Fields}}
		{{- if eq (add $j 1) (len $order.Fields)}}
		sortstr := fmt.Sprintf(" ORDER BY {{$field.Name | camel2name}} %s ", u.sortOp())
		{{- else}}
		conditons = append(conditons, "{{$field.Name | camel2name}} = ?")
		{{- end}}		
	{{- end}}
	return fmt.Sprintf("%s %s %s", strings.Join(conditions, " AND "), sortstr, orm.OffsetLimit(u.offset, u.limit))
}

func (u *{{$order.Name}}) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $order.Fields}}
		u.{{$field.Name}},
		{{- end}}
	}
}

func (u *{{$order.Name}}) SQLLimit() int {
	if u.limit > 0 {
		return u.limit	
	}
	return -1
}

func (u *{{$order.Name}}) Limit(n int) {
	u.limit = n
}

func (u *{{$order.Name}}) Offset(n int) {
	u.offset = n
}

func (u *{{$order.Name}}) Ascend(f bool) {
	u.ascend = f
}

{{$relation := $order.GetRelation "zset" $primaryField.GetType $obj.Name}}
func (u *{{$order.Name}}) ORDRelation() OrderByRelation {
	{{- if $order.Obj.DbContains "redis"}}
	return {{$relation.Name}}RedisMgr()
	{{- else}}
	return nil
	{{- end}}
}

{{end}}
