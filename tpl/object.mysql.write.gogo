{{define "object.mysql.write"}}
{{$obj := .}}
{{$primaryField := $obj.PrimaryField}}
//! tx write
type _{{$obj.Name}}MySQLTx struct {
	*orm.MySQLTx
	err error
	rowsAffected int64
}

func (m *_{{$obj.Name}}MySQLMgr) BeginTx() (*_{{$obj.Name}}MySQLTx, error) {
	tx, err := m.Begin()
	if err != nil {
		return nil, err
	}
	return &_{{$obj.Name}}MySQLTx{orm.NewMySQLTx(tx), nil, 0}, nil
}

func (tx *_{{$obj.Name}}MySQLTx) BatchCreate(objs []*{{$obj.Name}}) error {
	if len(objs) == 0 {
		return nil
	}

	params := make([]string, 0, len(objs))
	values := make([]interface{}, 0, len(objs)*{{len $obj.Fields}})
	for _, obj := range objs {
		params = append(params, fmt.Sprintf("(%s)", strings.Join(orm.NewStringSlice({{len $obj.Fields}}, "?"), ",")))
		{{- range $i, $field := $obj.Fields -}}
			{{- if $field.IsPrimary}}
				{{- if $field.IsAutoIncrement}}
				values = append(values, 0)
				{{- else}}
				values = append(values, {{$field.GetTransformValue "obj."}})	
				{{- end}}			
			{{- else}}
			values = append(values, {{$field.GetTransformValue "obj."}})
			{{- end}}			
		{{- end -}}
	}
	query := fmt.Sprintf("INSERT INTO `{{$obj.DbTable}}`(%s) VALUES %s", strings.Join(objs[0].GetColumns(), ","), strings.Join(params, ","))
	result, err := tx.Exec(query, values...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) BatchDelete(objs []*{{$obj.Name}}) error {
	if len(objs) == 0 {
		return nil
	}

	ids := make([]interface{}, 0, len(objs))
	for _, obj := range objs {
		ids = append(ids, obj.{{$primaryField.Name}})
	}
	return tx.DeleteBy{{$primaryField.Name}}s(ids)
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (tx *_{{$obj.Name}}MySQLTx) UpdateBySQL(set, where string, args ...interface{}) error {
	query := fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s", set)
	if where != "" {
		query = fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s WHERE %s", set, where)
	}
	result, err := tx.Exec(query, args)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Create(obj *{{$obj.Name}}) error {
	params := orm.NewStringSlice({{len $obj.Fields}}, "?")
	q := fmt.Sprintf("INSERT INTO `{{$obj.DbTable}}`(%s) VALUES(%s)", 
		strings.Join(obj.GetColumns(), ","), 
		strings.Join(params, ","))

	result, err := tx.Exec(q 
		{{- range $i, $field := $obj.Fields -}}
			{{- if $field.IsAutoIncrement -}}
			, 0
			{{- else -}}
			, {{$field.GetTransformValue "obj."}}
			{{- end -}}			
		{{- end -}}
	)
	if err != nil {
		tx.err = err
		return err
	}
	lastInsertId, err := result.LastInsertId()
	if err != nil {
		tx.err = err
		return err
	}
	obj.{{$primaryField.Name}} = {{$primaryField.GetType}}(lastInsertId)
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Update(obj *{{$obj.Name}}) error {
	columns := []string{
	{{- range $i, $field := $obj.Fields}}
		{{- if not $field.IsPrimary}}
		"`{{$field.Name | camel2name}}` = ?",
		{{- end}}
	{{- end}}
	}
	q := fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s WHERE `{{$primaryField.Name | camel2name}}`=?", 
		strings.Join(columns, ","))
	result, err := tx.Exec(q 
		{{- range $i, $field := $obj.Fields -}}
			{{- if not $field.IsPrimary -}}
			, {{$field.GetTransformValue "obj."}}
			{{- end -}}
		{{- end -}}
		, {{$primaryField.GetTransformValue "obj."}})
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Save(obj *{{$obj.Name}}) error {
	err := tx.Update(obj)
	if err != nil {
		return err
	}	
	if tx.rowsAffected > 0 {
		return nil
	}
	return tx.Create(obj)
}

func (tx *_{{$obj.Name}}MySQLTx) Delete(obj *{{$obj.Name}}) error {
	q := fmt.Sprintf("DELETE FROM `{{$obj.DbTable}}` WHERE `{{$primaryField.Name | camel2name}}`=?")
	result, err := tx.Exec(q , {{$primaryField.GetTransformValue "obj."}})
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) DeleteBy{{$primaryField.Name}}s({{$primaryField.Name | camel2name}}s []interface{}) error { 
	if len({{$primaryField.Name | camel2name}}s) == 0 {
		return nil
	}

	q := fmt.Sprintf("DELETE FROM `{{$obj.DbTable}}` WHERE `{{$primaryField.Name | camel2name}}` IN (%s)",
		 orm.SliceJoin({{$primaryField.Name | camel2name}}s, ","))
	result, err := tx.Exec(q)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}


func (tx *_{{$obj.Name}}MySQLTx) Close() error {
	if tx.err != nil {
		return tx.Rollback()
	}
	return tx.Commit()
}

//! tx read
func (tx *_{{$obj.Name}}MySQLTx) FindOne(unique Unique) (interface{}, error) {
	objs, err := tx.queryLimit(unique.SQLFormat(true), unique.SQLLimit(), unique.SQLParams()...)
	if err != nil {
		tx.err = err
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	tx.err = fmt.Errorf("{{$obj.Name}} find record not found")
	return nil, tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) FindOneFetch(unique Unique) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), unique.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, unique.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("none record")
}

func (tx *_{{$obj.Name}}MySQLTx) Find(index Index) ([]interface{}, error) {
	return tx.queryLimit(index.SQLFormat(true), index.SQLLimit(), index.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) FindFetch(index Index) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), index.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, index.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) FindCount(index Index) (int64, error) {
	return tx.queryCount(index.SQLFormat(false), index.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) Range(scope Range) ([]interface{}, error) {
	return tx.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeFetch(scope Range) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), scope.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, scope.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) RangeCount(scope Range) (int64, error) {
	return tx.queryCount(scope.SQLFormat(false), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeRevert(scope Range) ([]interface{}, error) {
	scope.Revert(true)
	return tx.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeRevertFetch(scope Range) ([]*{{$obj.Name}}, error) {
	scope.Revert(true)
	return tx.RangeFetch(scope)
}

func (tx *_{{$obj.Name}}MySQLTx) queryLimit(where string, limit int, args ...interface{}) (results []interface{}, err error){
	query := fmt.Sprintf("SELECT `{{$primaryField.Name | camel2name}}` FROM `{{$obj.DbTable}}`")
	if where != "" {
		query += " WHERE " 
		query += where
	}

	rows, err := tx.Query(query, args...)
	if err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	offset :=0
	for rows.Next() {
		if limit >= 0 && offset >= limit {
			break
		}
		offset++

		var result {{$primaryField.GetType}}
		if err = rows.Scan(&result); err != nil {
			tx.err = err
			return nil, err
		}
		results = append(results, result)
	}
	if err := rows.Err() ;err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} query limit result error: %v", err)
	}
	return
}

func (tx *_{{$obj.Name}}MySQLTx) queryCount(where string, args ...interface{}) (int64, error){
	query := fmt.Sprintf("SELECT count(`{{$primaryField.Name | camel2name}}`) FROM `{{$obj.DbTable}}`")
	if where != "" {
		query += " WHERE " 
		query += where
	}

	rows, err := tx.Query(query, args...)
	if err != nil {
		tx.err = err
		return 0, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	var count int64
	for rows.Next() {
		if err = rows.Scan(&count); err != nil {
			tx.err = err
			return 0, err
		}
		break
	}
	
	return count, nil
}

func (tx *_{{$obj.Name}}MySQLTx) Fetch({{$primaryField.Name | camel2name}} interface{}) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` WHERE `{{$primaryField.Name}}` = (%s)", strings.Join(obj.GetColumns(), ","), fmt.Sprint({{$primaryField.Name | camel2name}}))
	objs, err := tx.FetchBySQL(query)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
	return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("{{$obj.Name}} fetch record not found")
}

func (tx *_{{$obj.Name}}MySQLTx) FetchBy{{$primaryField.Name}}s({{$primaryField.Name | camel2name}}s []interface{}) ( []*{{$obj.Name}}, error) {
	if len({{$primaryField.Name | camel2name}}s) == 0 {
		return []*{{$obj.Name}}{}, nil
	}
		
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbTable}}` WHERE `{{$primaryField.Name}}` IN (%s)", strings.Join(obj.GetColumns(), ","), orm.SliceJoin({{$primaryField.Name | camel2name}}s, ","))
	objs, err := tx.FetchBySQL(query)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) FetchBySQL(sql string, args ... interface{}) (results []interface{}, err error) {
	rows, err := tx.Query(sql, args...)
	if err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} fetch error: %v", err)
	}
	defer rows.Close()

	{{range $index, $field := $obj.Fields}}
	{{- if $field.IsNullablePrimitive }}
	var {{$field.Name}} sql.{{$field.GetNullSQLType}}
	{{- else if $field.IsNeedTransform }}
	var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
	{{- end -}}
	{{- end }}

	for rows.Next() {
		var result {{$obj.Name}}
		err = rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if or $field.IsNullablePrimitive $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{ end }}
		{{- end -}}
		)
		if err != nil {
			tx.err = err
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullablePrimitive}}
			result.{{$field.Name}} =
			{{- if $field.NullSQLTypeNeedCast -}}
				{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
			{{- else -}}
			{{$field.Name}}.{{$field.NullSQLTypeValue}}
			{{- end -}}
		{{- else if $field.IsNeedTransform }}
		   result.{{$field.Name}} =
		   {{- printf $field.GetTransform.ConvertTo $field.Name}}
		{{end -}}
		{{end}}

		results = append(results, &result)
	}
	if err = rows.Err() ;err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} fetch result error: %v", err)
	}
	return
}

{{end}}
