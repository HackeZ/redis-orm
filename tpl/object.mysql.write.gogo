{{define "object.mysql.write"}}
{{$obj := .}}
{{$relation := $obj.Relation}}
{{$primary := $obj.PrimaryKey}}
{{$primaryField := $primary.FirstField }}
//! tx write
type _{{$obj.Name}}MySQLTx struct {
	*orm.MySQLTx
	err error
	rowsAffected int64
}

func (m *_{{$obj.Name}}MySQLMgr) BeginTx(tx *orm.MySQLTx) (*_{{$obj.Name}}MySQLTx, error) {
	ux := tx
	if ux == nil {
		tx, err := m.MySQLStore.BeginTx()
		if err != nil {
			return nil, err
		}
		ux = tx
	}	
	return &_{{$obj.Name}}MySQLTx{ux, nil, 0}, nil
}

func (tx *_{{$obj.Name}}MySQLTx) BatchCreate(objs []*{{$obj.Name}}) error {
	if len(objs) == 0 {
		return nil
	}

	params := make([]string, 0, len(objs))
	values := make([]interface{}, 0, len(objs)*{{len $obj.Fields}})
	for _, obj := range objs {
		params = append(params, fmt.Sprintf("(%s)", strings.Join(orm.NewStringSlice({{len $obj.Fields}}, "?"), ",")))
		{{- range $i, $field := $obj.Fields -}}
			{{- if $field.IsAutoIncrement}}
				values = append(values, 0)
			{{- else if and $field.IsNullable $field.IsNeedTransform}}
				if obj.{{$field.Name}} == nil {
					values = append(values, nil)
				} else {
					values = append(values, {{$field.GetTransformValue "obj."}})
				}
			{{- else }}
				values = append(values, {{$field.GetTransformValue "obj."}})
			{{- end}}			
		{{- end}}
	}
	query := fmt.Sprintf("INSERT INTO `{{$obj.DbTable}}`(%s) VALUES %s", strings.Join(objs[0].GetColumns(), ","), strings.Join(params, ","))
	result, err := tx.Exec(query, values...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) BatchDelete(objs []*{{$obj.Name}}) error {
	for _, obj := range objs {
		if err := tx.Delete(obj); err != nil {
			return err
		}
	}
	return nil
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (tx *_{{$obj.Name}}MySQLTx) UpdateBySQL(set, where string, args ...interface{}) error {
	query := fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s", set)
	if where != "" {
		query = fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s WHERE %s", set, where)
	}
	result, err := tx.Exec(query, args...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Create(obj *{{$obj.Name}}) error {
	params := orm.NewStringSlice({{len $obj.Fields}}, "?")
	q := fmt.Sprintf("INSERT INTO `{{$obj.DbTable}}`(%s) VALUES(%s)", 
		strings.Join(obj.GetColumns(), ","), 
		strings.Join(params, ","))

	values := make([]interface{}, 0, {{len $obj.Fields}})
	{{- range $i, $field := $obj.Fields -}}
		{{- if $field.IsAutoIncrement}}
			values = append(values, 0)
		{{- else if and $field.IsNullable $field.IsNeedTransform}}
			if obj.{{$field.Name}} == nil {
				values = append(values, nil)
			} else {
				values = append(values, {{$field.GetTransformValue "obj."}})
			}
		{{- else }}
			values = append(values, {{$field.GetTransformValue "obj."}})
		{{- end}}			
	{{- end}}
	result, err := tx.Exec(q, values...)
	if err != nil {
		tx.err = err
		return err
	}
	lastInsertId, err := result.LastInsertId()
	if err != nil {
		tx.err = err
		return err
	}
	obj.{{$primaryField.Name}} = {{$primaryField.GetType}}(lastInsertId)
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Update(obj *{{$obj.Name}}) error {
	columns := []string{
	{{- range $i, $field := $obj.Fields}}
		{{- if not $field.IsPrimary}}
		"`{{$field.Name | camel2name}}` = ?",
		{{- end}}
	{{- end}}
	}	
	
	pk := obj.GetPrimaryKey()
	q := fmt.Sprintf("UPDATE `{{$obj.DbTable}}` SET %s %s", strings.Join(columns, ","), pk.SQLFormat())
	values := make([]interface{}, 0, {{len $obj.Fields}} - {{len $primary.Fields}})
	{{- range $i, $field := $obj.Fields -}}
			{{- if not $field.IsPrimary}}
				{{- if and $field.IsNullable $field.IsNeedTransform}}
					if obj.{{$field.Name}} == nil {
						values = append(values, nil)
					} else {
						values = append(values, {{$field.GetTransformValue "obj."}})
					}	
				{{- else}}
					values = append(values, {{$field.GetTransformValue "obj."}})
				{{- end}}
			{{- end}}			
		{{- end}}
	values = append(values, pk.SQLParams()...)

	result, err := tx.Exec(q, values...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Save(obj *{{$obj.Name}}) error {
	err := tx.Update(obj)
	if err != nil {
		return err
	}	
	if tx.rowsAffected > 0 {
		return nil
	}
	return tx.Create(obj)
}

func (tx *_{{$obj.Name}}MySQLTx) Delete(obj *{{$obj.Name}}) error {
	pk := obj.GetPrimaryKey()
	return tx.DeleteByPrimaryKey(pk)
}

func (tx *_{{$obj.Name}}MySQLTx) DeleteByPrimaryKey(pk PrimaryKey) error {
	q := fmt.Sprintf("DELETE FROM `{{$obj.DbTable}}` %s", pk.SQLFormat())
	result, err := tx.Exec(q , pk.SQLParams()...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) DeleteBySQL(where string, args ...interface{}) error { 
	query := fmt.Sprintf("DELETE FROM `{{$obj.DbTable}}`")
	if where != "" {
		query = fmt.Sprintf("DELETE FROM `{{$obj.DbTable}}` WHERE %s", where)
	}
	result, err := tx.Exec(query, args...)
	if err != nil {
		tx.err = err
		return err
	}
	tx.rowsAffected, tx.err = result.RowsAffected()
	return tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) Close() error {
	if tx.err != nil {
		return tx.Rollback()
	}
	return tx.Commit()
}

//! tx read
func (tx *_{{$obj.Name}}MySQLTx) FindOne(unique Unique) (PrimaryKey, error) {
	objs, err := tx.queryLimit(unique.SQLFormat(true), unique.SQLLimit(), unique.SQLParams()...)
	if err != nil {
		tx.err = err
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	tx.err = fmt.Errorf("{{$obj.Name}} find record not found")
	return nil, tx.err
}

func (tx *_{{$obj.Name}}MySQLTx) FindOneFetch(unique Unique) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), unique.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, unique.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("none record")
}

func (tx *_{{$obj.Name}}MySQLTx) Find(index Index) ([]PrimaryKey, error) {
	return tx.queryLimit(index.SQLFormat(true), index.SQLLimit(), index.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) FindFetch(index Index) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), index.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, index.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) FindCount(index Index) (int64, error) {
	return tx.queryCount(index.SQLFormat(false), index.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) Range(scope Range) ([]PrimaryKey, error) {
	return tx.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeFetch(scope Range) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), scope.SQLFormat(true))
	objs, err := tx.FetchBySQL(query, scope.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) RangeCount(scope Range) (int64, error) {
	return tx.queryCount(scope.SQLFormat(false), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeRevert(scope Range) ([]PrimaryKey, error) {
	scope.Revert(true)
	return tx.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (tx *_{{$obj.Name}}MySQLTx) RangeRevertFetch(scope Range) ([]*{{$obj.Name}}, error) {
	scope.Revert(true)
	return tx.RangeFetch(scope)
}

func (tx *_{{$obj.Name}}MySQLTx) queryLimit(where string, limit int, args ...interface{}) (results []PrimaryKey, err error){
	pk := {{$obj.Name}}Mgr.NewPrimaryKey()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(pk.Columns(), ","), where)
	rows, err := tx.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	offset :=0
	{{- range $index, $field := $primary.Fields}}
		{{- if $field.IsNullable }}
			var {{$field.Name}} sql.{{$field.GetNullSQLType}}
		{{- else if $field.IsNeedTransform }}
			var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
		{{- end -}}
	{{- end }}

	for rows.Next() {
		if limit >= 0 && offset >= limit {
			break
		}
		offset++

		result := {{$obj.Name}}Mgr.NewPrimaryKey()
		err = rows.Scan(
		{{- range $index, $field := $primary.Fields -}}
		{{- if or $field.IsNullable $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{- end }}
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $primary.Fields}}
			{{- if $field.IsNeedTransform }}
				{{- if $field.IsNullable -}}
					if {{$field.Name}}.Valid {
						{{- with $v := (printf "%sValue" $field.Name)}}
						{{$field.Name}}Value := {{$field.Name}}.{{$field.NullSQLTypeValue}}
						{{$field.Name}}Point := {{- printf $field.GetTransform.ConvertTo $v}}
						result.{{$field.Name}} = &{{$field.Name}}Point	
						{{- end}}
					} else {
						result.{{$field.Name}} = nil
					}					
				{{- else -}}
				result.{{$field.Name}} = {{- printf $field.GetTransform.ConvertTo $field.Name}}
				{{- end -}}
			{{- else }}				
				{{- if $field.IsNullable -}}
					result.{{$field.Name}} =
					{{- if $field.NullSQLTypeNeedCast -}}
					{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
					{{- else -}}
					{{$field.Name}}.{{$field.NullSQLTypeValue}}
					{{- end -}}
				{{- end -}}
			{{- end}}
		{{end}}
		results = append(results, result)
	}
	if err := rows.Err() ;err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} query limit result error: %v", err)
	}
	return
}

func (tx *_{{$obj.Name}}MySQLTx) queryCount(where string, args ...interface{}) (int64, error){
	query := fmt.Sprintf("SELECT count(`{{$primaryField.Name | camel2name}}`) FROM `{{$obj.DbTable}}` %s", where)
	
	rows, err := tx.Query(query, args...)
	if err != nil {
		tx.err = err
		return 0, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	var count int64
	for rows.Next() {
		if err = rows.Scan(&count); err != nil {
			tx.err = err
			return 0, err
		}
		break
	}
	
	return count, nil
}

func (tx *_{{$obj.Name}}MySQLTx) Fetch(pk PrimaryKey) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), pk.SQLFormat())
	objs, err := tx.FetchBySQL(query, pk.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("{{$obj.Name}} fetch record not found")
}

func (tx *_{{$obj.Name}}MySQLTx) FetchByPrimaryKeys(pks []PrimaryKey) ([]*{{$obj.Name}}, error) {
{{- if $primary.IsSingleField}}
	params := make([]string, 0, len(pks))
	for _, pk := range pks {
		params = append(params, fmt.Sprint(pk.(*{{$primary.Name}}).{{$primary.FirstField.Name}}))
	}
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` WHERE `{{$primaryField.Name}}` IN (%s)", strings.Join(obj.GetColumns(), ","), strings.Join(params, ","))
	objs, err := tx.FetchBySQL(query)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
{{- else}}
	results := make([]*{{$obj.Name}}, 0, len(pks))
	for _, pk := range pks {
		obj, err := tx.Fetch(pk)
		if err != nil {
			return nil, err
		}
		results = append(results, obj)
	}
	return results, nil
{{- end}}
}

func (tx *_{{$obj.Name}}MySQLTx) Search(where string, args ... interface{}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	if where != "" {
	 	where = " WHERE " + where
	}
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), where)
	objs, err := tx.FetchBySQL(query, args...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (tx *_{{$obj.Name}}MySQLTx) SearchCount(where string, args ... interface{}) (int64, error) {
	if where != "" {
		where = " WHERE " + where
	}
	return tx.queryCount(where, args...)
}

func (tx *_{{$obj.Name}}MySQLTx) FetchBySQL(q string, args ... interface{}) (results []interface{}, err error) {
	rows, err := tx.Query(q, args...)
	if err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} fetch error: %v", err)
	}
	defer rows.Close()

	{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullable }}
			var {{$field.Name}} sql.{{$field.GetNullSQLType}}
		{{- else if $field.IsNeedTransform }}
			var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
		{{- end -}}
	{{- end }}

	for rows.Next() {
		var result {{$obj.Name}}
		err = rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if or $field.IsNullable $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{- end }}
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
			{{- if $field.IsNeedTransform }}
				{{- if $field.IsNullable -}}
					if {{$field.Name}}.Valid {
						{{- with $v := (printf "%sValue" $field.Name)}}
						{{$field.Name}}Value := {{$field.Name}}.{{$field.NullSQLTypeValue}}
						{{$field.Name}}Point := {{- printf $field.GetTransform.ConvertTo $v}}
						result.{{$field.Name}} = &{{$field.Name}}Point	
						{{- end}}
					} else {
						result.{{$field.Name}} = nil
					}					
				{{- else -}}
				result.{{$field.Name}} = {{- printf $field.GetTransform.ConvertTo $field.Name}}
				{{- end -}}
			{{- else }}				
				{{- if $field.IsNullable -}}
					result.{{$field.Name}} =
					{{- if $field.NullSQLTypeNeedCast -}}
					{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
					{{- else -}}
					{{$field.Name}}.{{$field.NullSQLTypeValue}}
					{{- end -}}
				{{- end -}}
			{{- end}}
		{{end}}

		results = append(results, &result)
	}
	if err = rows.Err() ;err != nil {
		tx.err = err
		return nil, fmt.Errorf("{{$obj.Name}} fetch result error: %v", err)
	}
	return
}

{{end}}
