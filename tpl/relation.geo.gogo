{{define "relation.geo"}}
{{$relation := .}}
{{$primaryField := $relation.PrimaryField}}
//! redis relation pair
func (m *_{{$relation.Name}}RedisMgr) LocationAdd(obj *{{$relation.Name}}) error {	
	return m.GeoAdd(geoOfClass(obj.GetClassName(), obj.Key), &redis.GeoLocation{
		Longitude: obj.Longitude,
		Latitude:  obj.Latitude,
		Name:      fmt.Sprint(obj.Value),
	}).Err()
}

func (m *_{{$relation.Name}}RedisMgr) LocationRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) ([]*{{$relation.Name}}, error) {
	locations, err := m.GeoRadius(geoOfClass("{{$relation.Name}}", key), longitude, latitude, query).Result()
	if err != nil {
		return nil, err
	}

	objs := make([]*{{$relation.Name}}, len(locations))
	for _, location := range locations {
		obj := m.New{{$relation.Name}}(key)
		obj.Longitude = location.Longitude
		obj.Latitude = location.Latitude
		{{- if $relation.ValueField.IsNeedTransform}}
			var val {{$relation.ValueField.GetTransform.TypeOrigin}}
			if err := m.StringScan(location.Name, &val); err != nil {
				return nil, err
			}
			obj.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
		{{- else}}
		if err := m.StringScan(location.Name, &obj.Value); err != nil {
			return nil, err
		}
		{{- end}}
		objs = append(objs, obj)
	}
	return objs, nil
}

func (m *_{{$relation.Name}}RedisMgr) LocationRem(obj *{{$relation.Name}}) error {
	return m.ZRem(geoOfClass(obj.GetClassName(), obj.Key), fmt.Sprint(obj.Value)).Err()
}

{{end}}

