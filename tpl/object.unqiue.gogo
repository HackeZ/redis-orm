{{define "object.unique"}}
{{$unique := .}}
{{$obj := .Obj}}
{{$primaryField := .Obj.PrimaryField}}

type {{$unique.Name}} struct{
	{{- range $j, $field := $unique.Fields}}
	{{$field.Name}} {{$field.GetType}}
	{{- end}}
}

func (u *{{$unique.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $unique.Fields}}
		"{{$field.Name}}",
		fmt.Sprint(u.{{$field.Name}}),
		{{- end}}
	}
	return fmt.Sprintf("%s", strings.Join(strs, ":"))
}

func (u *{{$unique.Name}}) SQLFormat(limit bool) string {
	conditions := []string{
		{{- range $j, $field := $unique.Fields}}
		"{{$field.Name | camel2name}} = ?",
		{{- end}}
	}
	return orm.SQLWhere(conditions)
}

func (u *{{$unique.Name}}) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $unique.Fields}}
		u.{{$field.Name}},
		{{- end}}
	}
}

func (u *{{$unique.Name}}) SQLLimit() int {
	return 1
}

func (u *{{$unique.Name}}) Limit(n int) {
}

func (u *{{$unique.Name}}) Offset(n int) {
}

{{$relation := $unique.GetRelation "pair" $primaryField.GetType $obj.Name}}
func (u *{{$unique.Name}}) UKRelation() UniqueRelation {
	{{- if $unique.Obj.DbContains "redis"}}
	return {{$relation.Name}}RedisMgr()
	{{- else}}
	return nil
	{{- end}}
}

{{end}}
