{{define "object.unique"}}
{{$unique := .}}
{{$obj := .Obj}}
{{$primaryField := .Obj.PrimaryField}}

type {{$unique.Name}} struct{
	{{- range $j, $field := $unique.Fields}}
	{{$field.Name}} {{$field.GetType}}
	{{- end}}
}

func (m *_{{$obj.Name}}DBMgr) FetchBy{{$unique.GetFuncName}}({{$unique.GetFuncParam}}) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	uniq := &{{$unique.Name}}{
	{{- range $j, $field := $unique.Fields}}
	{{$field.Name}}: {{$field.Name}},
	{{- end}}
	}

	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), uniq.SQLFormat(true))
	objs, err := m.FetchBySQL(query, uniq.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return nil, fmt.Errorf("{{$obj.Name}} fetch record not found")
}

func (u *{{$unique.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $unique.Fields}}
		"{{$field.Name}}",
			{{- if $field.IsEncode}}
			orm.Encode(fmt.Sprint(u.{{$field.Name}})),
			{{- else}}
			fmt.Sprint(u.{{$field.Name}}),
			{{- end}}
		{{- end}}
	}
	return fmt.Sprintf("%s", strings.Join(strs, ":"))
}

func (u *{{$unique.Name}}) SQLFormat(limit bool) string {
	conditions := []string{
		{{- range $j, $field := $unique.Fields}}
		"{{$field.FieldName}} = ?",
		{{- end}}
	}
	return orm.SQLWhere(conditions)
}

func (u *{{$unique.Name}}) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $unique.Fields}}
		u.{{$field.Name}},
		{{- end}}
	}
}

func (u *{{$unique.Name}}) SQLLimit() int {
	return 1
}

func (u *{{$unique.Name}}) Limit(n int) {
}

func (u *{{$unique.Name}}) Offset(n int) {
}

{{$relation := $unique.GetRelation "pair" $primaryField.GetType $obj.Name}}
func (u *{{$unique.Name}}) UKRelation(store *orm.RedisStore) UniqueRelation {
	{{- if $unique.Obj.DbContains "redis"}}
	return {{$relation.Name}}RedisMgr(store)
	{{- else}}
	return nil
	{{- end}}
}

{{end}}
