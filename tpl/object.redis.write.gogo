{{define "object.redis.write"}}
{{$obj := .}}
{{$primaryField := $obj.PrimaryField}}

func (m *_{{$obj.Name}}RedisMgr) Create(obj *{{$obj.Name}}) error {
	return m.Save(obj)
}

func (m *_{{$obj.Name}}RedisMgr) Update(obj *{{$obj.Name}}) error {
	return m.Save(obj)
}

func (m *_{{$obj.Name}}RedisMgr) Delete(obj *{{$obj.Name}}) error {
	pipe := m.BeginPipeline()
	//! uniques
	{{- range $i, $unique := $obj.Uniques}}
	{{- $relation := ($unique.GetRelation "pair" $primaryField.GetType $obj.Name)}}
	uk_key_{{$i}} := []string{
		{{- range $j, $field:= $unique.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	uk_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	if err := uk_pip_{{$i}}.PairRem(strings.Join(uk_key_{{$i}}, ":")); err != nil {
		return err
	}
	{{- end}}

	//! indexes
	{{- range $i, $index := $obj.Indexes}}
	{{- $relation := ($index.GetRelation "set" $primaryField.GetType $obj.Name)}}
	idx_key_{{$i}} := []string{
		{{- range $j, $field:= $index.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	idx_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	idx_rel_{{$i}} := {{$relation.Name}}RedisMgr().New{{$relation.Name}}(strings.Join(idx_key_{{$i}}, ":"))
	idx_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := idx_pip_{{$i}}.SetRem(idx_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! ranges
	{{- range $i, $rg := $obj.Ranges}}
	{{- $relation := ($rg.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	rg_key_{{$i}} := []string{
		{{- range $j, $field:= $rg.Fields}}
			{{- if eq (len $rg.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}
		{{- end}}
	}
	rg_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	rg_rel_{{$i}} := {{$relation.Name}}RedisMgr().New{{$relation.Name}}(strings.Join(rg_key_{{$i}}, ":"))
	score_rg_{{$i}}, err := orm.ToFloat64({{$rg.LastField.GetTransformValue "obj."}})
	if err != nil {
		return err
	}
	rg_rel_{{$i}}.Score = score_rg_{{$i}}
	rg_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := rg_pip_{{$i}}.ZSetRem(rg_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	if err := pipe.Del(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}}))).Err(); err != nil {
		return err
	}

	if _, err := pipe.Exec(); err != nil {
		return err
	}
	return nil
}


func (m *_{{$obj.Name}}RedisMgr) SaveBatch(objs []*{{$obj.Name}}) error {
	if len(objs) > 0 {
		pipe := m.BeginPipeline()
		for _, obj := range objs {
			m.addToPipeline(pipe, obj)
		}
		if _, err := pipe.Exec(); err != nil {
			return err
		}	
	}	
	return nil
}

func (m *_{{$obj.Name}}RedisMgr) Save(obj *{{$obj.Name}}) error {
	if obj != nil {
		pipe := m.BeginPipeline()
		m.addToPipeline(pipe, obj)
		if _, err := pipe.Exec(); err != nil {
			return err
		}
	}
	return nil
}

func (m *_{{$obj.Name}}RedisMgr) addToPipeline(pipe * _{{$obj.Name}}RedisPipeline, obj *{{$obj.Name}}) error {
	//! fields
	{{- range $i, $field := $obj.Fields}}
		{{- if and $field.IsNullable $field.IsNeedTransform}}
			if obj.{{$field.Name}} != nil {
				pipe.HSet(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}})), "{{$field.Name}}", fmt.Sprint({{$field.GetTransformValue "obj."}}))
			} else {
				pipe.HSet(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}})), "{{$field.Name}}", "nil")
			}
		{{- else}}
			pipe.HSet(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}})), "{{$field.Name}}", fmt.Sprint({{$field.GetTransformValue "obj."}}))
		{{- end}}	
	{{- end}}

	//! uniques
	{{- range $i, $unique := $obj.Uniques}}
	{{- $relation := ($unique.GetRelation "pair" $primaryField.GetType $obj.Name)}}
	uk_key_{{$i}} := []string{
		{{- range $j, $field:= $unique.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	uk_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	uk_rel_{{$i}} := {{$relation.Name}}RedisMgr().New{{$relation.Name}}(strings.Join(uk_key_{{$i}}, ":"))
	uk_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := uk_pip_{{$i}}.PairAdd(uk_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! indexes
	{{- range $i, $index := $obj.Indexes}}
	{{- $relation := ($index.GetRelation "set" $primaryField.GetType $obj.Name)}}
	idx_key_{{$i}} := []string{
		{{- range $j, $field:= $index.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	idx_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	idx_rel_{{$i}} := {{$relation.Name}}RedisMgr().New{{$relation.Name}}(strings.Join(idx_key_{{$i}}, ":"))
	idx_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := idx_pip_{{$i}}.SetAdd(idx_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! ranges
	{{- range $i, $rg := $obj.Ranges}}
	{{- $relation := ($rg.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	rg_key_{{$i}} := []string{
		{{- range $j, $field:= $rg.Fields}}
			{{- if eq (len $rg.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}
		{{- end}}
	}
	rg_pip_{{$i}} := {{$relation.Name}}RedisMgr().BeginPipeline(pipe.Pipeline)
	rg_rel_{{$i}} := {{$relation.Name}}RedisMgr().New{{$relation.Name}}(strings.Join(rg_key_{{$i}}, ":"))
	score_rg_{{$i}}, err := orm.ToFloat64({{$rg.LastField.GetTransformValue "obj."}})
	if err != nil {
		return err
	}
	rg_rel_{{$i}}.Score = score_rg_{{$i}}
	rg_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := rg_pip_{{$i}}.ZSetAdd(rg_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	return nil
}

func (m *_{{$obj.Name}}RedisMgr) Clear() error {
	if strs, err := m.Keys(pairOfClass("{{$obj.Name}}", "*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	if strs, err := m.Keys(hashOfClass("{{$obj.Name}}", "object","*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	if strs, err := m.Keys(setOfClass("{{$obj.Name}}", "*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	if strs, err := m.Keys(zsetOfClass("{{$obj.Name}}", "*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	if strs, err := m.Keys(geoOfClass("{{$obj.Name}}", "*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	if strs, err := m.Keys(listOfClass("{{$obj.Name}}", "*")).Result(); err == nil {
		if len(strs) > 0 {
			m.Del(strs...)
		}
	}
	return nil
}

{{end}}
