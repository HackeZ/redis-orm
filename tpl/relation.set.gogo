{{define "relation.set"}}
{{$relation := .}}
{{$primaryField := $relation.PrimaryField}}
//! redis relation pair
func (m *_{{$relation.Name}}RedisMgr) SetAdd(relation *{{$relation.Name}}) error {
	return m.SAdd(setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), relation.Value).Err()
}

func (m *_{{$relation.Name}}RedisMgr) SetGet(key string) ([]*{{$relation.Name}}, error) {
	strs, err := m.SMembers(setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Result()
	if err != nil {
		return nil, err
	}

	relations := make([]*{{$relation.Name}}, len(strs))
	for _, str := range strs {
		relation := m.New{{$relation.Name}}(key)
		{{- if $relation.ValueField.IsNeedTransform}}
			var val {{$relation.ValueField.GetTransform.TypeOrigin}}
			if err := m.StringScan(str, &val); err != nil {
				return nil, err
			}
			relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
		{{- else}}
		if err := m.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
		{{- end}}
		relations = append(relations, relation)
	}
	return relations, nil
}

func (m *_{{$relation.Name}}RedisMgr) SetRem(relation *{{$relation.Name}}) error {
	return m.SRem(setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), relation.Value).Err()
}

func (m *_{{$relation.Name}}RedisMgr) SetDel(key string) error {
	return m.Del(setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Err()
}

func (m *_{{$relation.Name}}RedisMgr) Find(key string) ([]string, error) {
	return m.SMembers(setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Result()
}

{{end}}
