{{define "orm.redis.write"}}
{{$obj := .}}
{{$primaryField := $obj.PrimaryField}}

func (m *_{{$obj.Name}}RedisMgr) Create(obj *{{$obj.Name}}) error {
	return m.Save(obj)
}

func (m *_{{$obj.Name}}RedisMgr) Update(obj *{{$obj.Name}}) error {
	return m.Save(obj)
}

func (m *_{{$obj.Name}}RedisMgr) Delete(obj *{{$obj.Name}}) error {
	//! uniques
	{{- range $i, $unique := $obj.Uniques}}
	{{- $relation := ($unique.GetRelation "pair" $primaryField.GetType $obj.Name)}}
	uk_key_{{$i}} := []string{
		{{- range $j, $field:= $unique.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	uk_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	if err := uk_mgr_{{$i}}.PairRem(strings.Join(uk_key_{{$i}}, ":")); err != nil {
		return err
	}
	{{- end}}

	//! indexes
	{{- range $i, $index := $obj.Indexes}}
	{{- $relation := ($index.GetRelation "set" $primaryField.GetType $obj.Name)}}
	idx_key_{{$i}} := []string{
		{{- range $j, $field:= $index.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	idx_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	idx_rel_{{$i}} := idx_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(idx_key_{{$i}}, ":"))
	idx_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := idx_mgr_{{$i}}.SetRem(idx_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! ranges
	{{- range $i, $rg := $obj.Ranges}}
	{{- $relation := ($rg.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	rg_key_{{$i}} := []string{
		{{- range $j, $field:= $rg.Fields}}
			{{- if eq (len $rg.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}		
		{{- end}}
	}
	rg_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	rg_rel_{{$i}} := rg_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(rg_key_{{$i}}, ":"))
	rg_rel_{{$i}}.Score = orm.ToFloat64({{$rg.LastField.GetTransformValue "obj."}})
	rg_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := rg_mgr_{{$i}}.ZSetRem(rg_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! orders
	{{- range $i, $order := $obj.Orders}}
	{{- $relation := ($order.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	order_key_{{$i}} := []string{
		{{- range $j, $field:= $order.Fields}}
			{{- if eq (len $order.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}		
		{{- end}}
	}
	order_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	order_rel_{{$i}} := order_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(order_key_{{$i}}, ":"))
	order_rel_{{$i}}.Score = orm.ToFloat64({{$order.LastField.GetTransformValue "obj."}})
	order_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := order_mgr_{{$i}}.ZSetRem(order_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	return m.Del(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}}))).Err()
}

func (m *_{{$obj.Name}}RedisMgr) Save(obj *{{$obj.Name}}) error {
	pipe := m.BeginPipeline()
	//! fields
	{{- range $i, $field := $obj.Fields}}
	pipe.HSet(keyOfObject(obj, fmt.Sprint({{$primaryField.GetTransformValue "obj."}})), "{{$field.Name}}", fmt.Sprint({{$field.GetTransformValue "obj."}}))
	{{- end}}
	if _, err := pipe.Exec(); err != nil {
		return err
	}

	//! uniques
	{{- range $i, $unique := $obj.Uniques}}
	{{- $relation := ($unique.GetRelation "pair" $primaryField.GetType $obj.Name)}}
	uk_key_{{$i}} := []string{
		{{- range $j, $field:= $unique.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	uk_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	uk_rel_{{$i}} := uk_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(uk_key_{{$i}}, ":"))
	uk_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := uk_mgr_{{$i}}.PairAdd(uk_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! indexes
	{{- range $i, $index := $obj.Indexes}}
	{{- $relation := ($index.GetRelation "set" $primaryField.GetType $obj.Name)}}
	idx_key_{{$i}} := []string{
		{{- range $j, $field:= $index.Fields}}
		"{{$field.Name}}",
		fmt.Sprint({{$field.GetTransformValue "obj."}}),
		{{- end}}
	}
	idx_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	idx_rel_{{$i}} := idx_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(idx_key_{{$i}}, ":"))
	idx_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := idx_mgr_{{$i}}.SetAdd(idx_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! ranges
	{{- range $i, $rg := $obj.Ranges}}
	{{- $relation := ($rg.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	rg_key_{{$i}} := []string{
		{{- range $j, $field:= $rg.Fields}}
			{{- if eq (len $rg.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}		
		{{- end}}
	}
	rg_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	rg_rel_{{$i}} := rg_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(rg_key_{{$i}}, ":"))
	rg_rel_{{$i}}.Score = orm.ToFloat64({{$rg.LastField.GetTransformValue "obj."}})
	rg_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := rg_mgr_{{$i}}.ZSetAdd(rg_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}

	//! orders
	{{- range $i, $order := $obj.Orders}}
	{{- $relation := ($order.GetRelation "zset" $primaryField.GetType $obj.Name)}}
	order_key_{{$i}} := []string{
		{{- range $j, $field:= $order.Fields}}
			{{- if eq (len $order.Fields) (add $j 1)}}
				"{{$field.Name}}",
			{{- else}}
				"{{$field.Name}}",
				fmt.Sprint({{$field.GetTransformValue "obj."}}),
			{{- end}}		
		{{- end}}
	}
	order_mgr_{{$i}} := {{$relation.Name}}RedisMgr(m.RedisStore)
	order_rel_{{$i}} := order_mgr_{{$i}}.New{{$relation.Name}}(strings.Join(order_key_{{$i}}, ":"))
	order_rel_{{$i}}.Score = orm.ToFloat64({{$order.LastField.GetTransformValue "obj."}})
	order_rel_{{$i}}.Value = {{$primaryField.GetTransformValue "obj."}}
	if err := order_mgr_{{$i}}.ZSetAdd(order_rel_{{$i}}); err != nil {
		return err
	}
	{{- end}}
	return nil
}

func (m *_{{$obj.Name}}RedisMgr) Clear() error {
	return nil
}

{{end}}

