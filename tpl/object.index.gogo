{{define "object.index"}}
{{$index := .}}
type {{$index.Name}}Index struct{
	{{- range $j, $field := $index.Fields}}
	{{$field.Name}} {{$field.GetType}}
	{{- end}}
	offset int
	limit int
}
func (u *{{$index.Name}}Index) Key() string {
	strs := []string{
		{{- range $j, $field := $index.Fields}}
		"{{$field.Name}}",
		fmt.Sprint(u.{{$field.Name}}),
		{{- end}}
	}
	return fmt.Sprintf("index:%s", strings.Join(strs, ":"))
}

func (u *{{$index.Name}}Index) SQLFormat() string {
	conditions := []string{
		{{- range $j, $field := $index.Fields}}
		"{{$field.Name | camel2name}} = ?",
		{{- end}}
	}
	return fmt.Sprintf("%s %s", strings.Join(conditions, " AND "), orm.OffsetLimit(u.offset, u.limit))
}

func (u *{{$index.Name}}Index) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $index.Fields}}
		u.{{$field.Name}},
		{{- end}}
	}
}

func (u *{{$index.Name}}Index) SQLLimit() int {
	if u.limit > 0 {
		return u.limit	
	}
	return -1
}

func (u *{{$index.Name}}Index) Limit(n int) {
	u.limit = n
}

func (u *{{$index.Name}}Index) Offset(n int) {
	u.offset = n
}
{{end}}
