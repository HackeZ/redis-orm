{{define "object.mysql.read"}}
{{$obj := .}}
{{$primaryField := $obj.PrimaryField}}
type _{{$obj.Name}}MySQLMgr struct {
	*orm.MySQLStore
}

func {{$obj.Name}}MySQLMgr() *_{{$obj.Name}}MySQLMgr {
	return &_{{$obj.Name}}MySQLMgr{_mysql_store}
}

func New{{$obj.Name}}MySQLMgr(cf *MySQLConfig) (*_{{$obj.Name}}MySQLMgr, error) {
	store, err := orm.NewMySQLStore(cf.Host, cf.Port, cf.Database, cf.UserName, cf.Password)
	if err != nil {
		return nil, err
	}
	return &_{{$obj.Name}}MySQLMgr{store}, nil
}

{{if not $obj.Relation}}
func (m *_{{$obj.Name}}MySQLMgr) Search(where string, args ...interface{}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	if where != "" {
	 	where = " WHERE " + where
	}
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), where)
	objs, err := m.FetchBySQL(query, args...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (m *_{{$obj.Name}}MySQLMgr) SearchCount(where string, args ...interface{}) (int64, error){ 
	if where != "" {
		where = " WHERE " + where
	}
	return m.queryCount(where, args...)
}
{{- end}}

func (m *_{{$obj.Name}}MySQLMgr) FetchBySQL(q string, args ... interface{}) (results []interface{}, err error) {
	rows, err := m.Query(q, args...)	
	if err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} fetch error: %v", err)
	}
	defer rows.Close()

	{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullable }}
			var {{$field.Name}} sql.{{$field.GetNullSQLType}}
		{{- else if $field.IsNeedTransform }}
			var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
		{{- end -}}
	{{- end }}

	for rows.Next() {
		var result {{$obj.Name}}
		err = rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if or $field.IsNullable $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{- end }}
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
			{{- if $field.IsNeedTransform }}
				{{- if $field.IsNullable -}}
					if {{$field.Name}}.Valid {
						{{- with $v := (printf "%sValue" $field.Name)}}
						{{$field.Name}}Value := {{$field.Name}}.{{$field.NullSQLTypeValue}}
						{{$field.Name}}Point := {{- printf $field.GetTransform.ConvertTo $v}}
						result.{{$field.Name}} = &{{$field.Name}}Point	
						{{- end}}
					} else {
						result.{{$field.Name}} = nil
					}					
				{{- else -}}
				result.{{$field.Name}} = {{- printf $field.GetTransform.ConvertTo $field.Name}}
				{{- end -}}
			{{- else }}				
				{{- if $field.IsNullable -}}
					result.{{$field.Name}} =
					{{- if $field.NullSQLTypeNeedCast -}}
					{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
					{{- else -}}
					{{$field.Name}}.{{$field.NullSQLTypeValue}}
					{{- end -}}
				{{- end -}}
			{{- end}}
		{{end}}

		results = append(results, &result)
	}
	if err = rows.Err() ;err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} fetch result error: %v", err)
	}
	return
}

{{- if ne $obj.DbSource ""}}
func (m *_{{$obj.Name}}MySQLMgr) Fetch({{$primaryField.Name | camel2name}} interface{}) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` WHERE `{{$primaryField.Name}}` = (%s)", strings.Join(obj.GetColumns(), ","), {{$primaryField.Name | camel2name}})
	objs, err := m.FetchBySQL(query)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("{{$obj.Name}} fetch record not found")
}

func (m *_{{$obj.Name}}MySQLMgr) FetchBy{{$primaryField.Name}}s({{$primaryField.Name | camel2name}}s []interface{}) ([]*{{$obj.Name}}, error) {
	if len({{$primaryField.Name | camel2name}}s) == 0 {
		return []*{{$obj.Name}}{}, nil
	}
		
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` WHERE `{{$primaryField.Name}}` IN (%s)", strings.Join(obj.GetColumns(), ","), orm.SliceJoin({{$primaryField.Name | camel2name}}s, ","))
	objs, err := m.FetchBySQL(query)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (m *_{{$obj.Name}}MySQLMgr) FindOne(unique Unique) (interface{}, error) {
	objs, err := m.queryLimit(unique.SQLFormat(true), unique.SQLLimit(), unique.SQLParams()...)
	if err != nil {
		return "", err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return "", fmt.Errorf("{{$obj.Name}} find record not found")
}

func (m *_{{$obj.Name}}MySQLMgr) FindOneFetch(unique Unique) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), unique.SQLFormat(true))
	objs, err := m.FetchBySQL(query, unique.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0].(*{{$obj.Name}}), nil
	}
	return nil, fmt.Errorf("none record")
}

func (m *_{{$obj.Name}}MySQLMgr) Find(index Index) ([]interface{}, error) {
	return m.queryLimit(index.SQLFormat(true), index.SQLLimit(), index.SQLParams()...)
}

func (m *_{{$obj.Name}}MySQLMgr) FindFetch(index Index) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), index.SQLFormat(true))
	objs, err := m.FetchBySQL(query, index.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (m *_{{$obj.Name}}MySQLMgr) FindCount(index Index) (int64, error) {
	return m.queryCount(index.SQLFormat(false), index.SQLParams()...)
}

func (m *_{{$obj.Name}}MySQLMgr) Range(scope Range) ([]interface{}, error) {
	return m.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (m *_{{$obj.Name}}MySQLMgr) RangeFetch(scope Range) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM `{{$obj.DbSource}}` %s", strings.Join(obj.GetColumns(), ","), scope.SQLFormat(true))
	objs, err := m.FetchBySQL(query, scope.SQLParams()...)
	if err != nil {
		return nil, err
	}
	results := make([]*{{$obj.Name}}, 0, len(objs))
	for _, obj := range objs {
		results = append(results, obj.(*{{$obj.Name}}))
	}
	return results, nil
}

func (m *_{{$obj.Name}}MySQLMgr) RangeCount(scope Range) (int64, error) {
	return m.queryCount(scope.SQLFormat(false), scope.SQLParams()...)
}

func (m *_{{$obj.Name}}MySQLMgr) RangeRevert(scope Range) ([]interface{}, error) {
	scope.Revert(true)
	return m.queryLimit(scope.SQLFormat(true), scope.SQLLimit(), scope.SQLParams()...)
}

func (m *_{{$obj.Name}}MySQLMgr) RangeRevertFetch(scope Range) ([]*{{$obj.Name}}, error) {
	scope.Revert(true)
	return m.RangeFetch(scope)
}

func (m *_{{$obj.Name}}MySQLMgr) queryLimit(where string, limit int, args ...interface{}) (results []interface{}, err error){
	query := fmt.Sprintf("SELECT `{{$primaryField.Name | camel2name}}` FROM `{{$obj.DbSource}}` %s", where)
	rows, err := m.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	offset :=0
	for rows.Next() {
		if limit >= 0 && offset >= limit {
			break
		}
		offset++

		var result {{$primaryField.GetType}}
		if err = rows.Scan(&result); err != nil {
			return nil, err
		}
		results = append(results, result)
	}
	if err := rows.Err() ;err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} query limit result error: %v", err)
	}
	return
}

func (m *_{{$obj.Name}}MySQLMgr) queryCount(where string, args ...interface{}) (int64, error){
	query := fmt.Sprintf("SELECT count(`{{$primaryField.Name | camel2name}}`) FROM `{{$obj.DbSource}}` %s", where)
	rows, err := m.Query(query, args...)
	if err != nil {
		return 0, fmt.Errorf("{{$obj.Name}} query count error: %v", err)
	}
	defer rows.Close()

	var count int64
	for rows.Next() {
		if err = rows.Scan(&count); err != nil {
			return 0, err
		}
		break
	}
	return count, nil
}
{{- end}}

{{end}}
